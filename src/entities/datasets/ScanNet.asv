classdef ScanNet < BaseDataset
    properties
        poses (:, 4, 4) {mustBeA(poses, {'int', 'float'})}
    end

    methods (Access=public)
        function self = ScanNet(dataset_config)
            % Constructor
            self@BaseDataset(dataset_config);

            color_files = self.sort_files_by_number( ...
                {dir(fullfile(self.dataset_path, 'color', '*.jpg')).name});
            self.color_paths = fullfile(self.dataset_path, 'color', color_files);

            depth_files = self.sort_files_by_number( ...
                {dir(fullfile(self.dataset_path, 'depth', '*.png')).name});
            self.depth_paths = fullfile(self.dataset_path, 'depth', depth_files);
            
            self = self.load_poses();
        end
        
        function self = load_poses(self)
            % Load camera poses with given path
            self.poses = zeros(numel(self.color_paths), 4, 4);
            pose_files = self.sort_files_by_number( ...
                {dir(fullfile(self.dataset_path, 'pose', '*.txt')).name}); % cell
            pose_paths = fullfile(self.dataset_path, 'pose', pose_files); % cell
            for i = 1:length(pose_paths)
                pose_id = fopen(pose_paths{i}, 'r');
                pose = textscan(pose_id, '%f');
                fclose(pose_id);
                c2w = reshape(pose{1}, [4, 4])';
                self.poses(i, :, :) = c2w;
            end
        end

        function [rgb, depth, pose] = get_gray_rgb_depth_pose(self, idx)
            % Return rgb image, depth image, and camera pose with given index
            rgb = imread(self.color_paths(idx));

            if isfield(self.dataset_config, 'distortion')
                rgb = undistortImage(rgb, self.camera_params);
            end
            % rgb = cv2.resize(rgb, (self.dataset_config["W"], self.dataset_config["H"]))
            depth = imread(self.depth_paths(idx));
            pose = squeeze(self.poses(idx, :, :));

            if self.crop_edge > 0
                rgb = rgb(self.crop_edge+1:end-self.crop_edge, self.crop_edge+1:end-self.crop_edge, :);
                depth = depth(self.crop_edge+1:end-self.crop_edge, self.crop_edge+1:end-self.crop_edge);
            end
        end
        
        function sorted_files = sort_files_by_number(self, file_names)
            numbers = zeros(1, numel(file_names));
            for i = 1:numel(file_names)
                numbers(i) = str2double(regexp(file_names{i}, '\d+', 'match'));
            end
            [~, sorted_idx] = sort(numbers);
            sorted_files = file_names(sorted_idx);
        end
    end

end